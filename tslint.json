{
  "extends": [
    "tslint:recommended",
    "tslint-config-prettier"
  ],
  "rulesDirectory": [
    "codelyzer"
  ],
  "rules": {
    /*
     ** Airbnb style guide rules
     */
    "prefer-const": true, // 2.1, 13.1
    "no-var-keyword": true, // 2.2
    "object-literal-shorthand": true, // 3.3, 3.4
    "object-shorthand-properties-first": true, // 3.5
    "object-literal-key-quotes": [
      true,
      "as-needed"
    ], // 3.6
    "prefer-array-literal": true, // 4.1
    "quotemark": [
      true,
      "single",
      "avoid-escape",
      "avoid-template",
      "jsx-double"
    ], // 6.1, 6.5
    "prefer-template": true, // 6.3
    "no-eval": true, // 6.4
    "no-function-constructor-with-string-args": true, // 7.10
    "space-before-function-paren": [
      true,
      {
        "anonymous": "always", // 7.11
        "named": "never" // 19.3
      }
    ],
    "no-parameter-reassignment": true, // 7.12
    "ter-prefer-arrow-callback": [
      true
    ], // 8.1
    "arrow-parens": false, // 8.2
    "ter-arrow-parens": [
      true,
      "as-needed",
      {
        "requireForBlockBody": true
      }
    ], // 8.4
    "no-duplicate-imports": true, // 10.4
    "one-variable-per-declaration": [
      true,
      "ignore-for-loop"
    ], // 13.2
    "no-increment-decrement": true, // 13.6
    "triple-equals": [
      true,
      "allow-null-check"
    ], // 15.1
    "no-boolean-literal-compare": true, // 15.3
    "curly": [
      true,
      "ignore-same-line"
    ], // 16.1
    "brace-style": [
      true,
      "1tbs",
      {
        "allowSingleLine": true
      }
    ], // 16.2
    "no-else-after-return": true, // 16.3
    "comment-format": [
      true,
      "check-space"
    ], // 18.3
    "indent": [
      true,
      "spaces"
    ], // 19.1
    "ter-indent": [
      true,
      2,
      {
        "SwitchCase": 1
      }
    ], // 19.1
    "whitespace": [
      true,
      "check-branch", // 19.3
      "check-decl", // 19.4
      "check-operator", // 19.4
      "check-preblock", // 19.2
      "check-separator" // 19.14
    ],
    "eofline": true, // 19.5
    "space-in-parens": [
      true,
      "never"
    ], // 19.9
    "array-bracket-spacing": [
      true,
      "never"
    ], // 19.10
    "object-curly-spacing": [
      true,
      "always"
    ], // 19.11
    "block-spacing": true, // 19.13
    "ter-computed-property-spacing": true, // 19.15
    "ter-func-call-spacing": true, // 19.16
    "no-trailing-whitespace": true, // 19.18
    "no-consecutive-blank-lines": true, // 19.19
    "trailing-comma": [
      true,
      {
        "multiline": "always",
        "singleline": "never",
        "esSpecCompliant": true
      }
    ], // 20.2
    "semicolon": [
      true,
      "always"
    ], // 21.1
    "no-construct": true, // 22.2, 22.3, 22.6
    "radix": true, // 22.3
    "variable-name": [
      true,
      "check-format"
    ], // 23.2
    "class-name": true, // 23.3
    "no-this-assignment": [
      true,
      {
        "allow-destructuring": true
      }
    ], // 23.5
    "import-name": true, // 23.6
    /*
     ** Custom rules
     */
    "max-line-length": [
      true,
      {
        "limit": 120,
        "ignore-pattern": "^import |^export {(.*?)} |^loadChildren:",
        "check-regex": true
      }
    ],
    "max-classes-per-file": false,
    "deprecation": {
      "severity": "warn"
    },
    "import-blacklist": [
      true,
      "rxjs/Rx"
    ],
    "interface-name": [
      false
    ],
    "member-access": [
      true,
      "no-public"
    ],
    "member-ordering": [
      true,
      {
        "order": [
          "public-static-field",
          "public-static-method",
          "protected-static-field",
          "protected-static-method",
          "private-static-field",
          "private-static-method",
          "public-instance-field",
          "protected-instance-field",
          "private-instance-field",
          "public-constructor",
          "protected-constructor",
          "private-constructor",
          "public-instance-method",
          "protected-instance-method",
          "private-instance-method"
        ]
      }
    ],
    "ordered-imports": [
      true,
      {
        "module-source-path": "full",
        "grouped-imports": true,
        "groups": [
          {
            "name": "angular",
            "match": "^@angular.*",
            "order": 1
          },
          {
            "name": "project_modules",
            "match": "^(\\.\\/|\\.\\.\\/|\\.|src\\/)+.*",
            "order": 3
          },
          {
            "name": "3rd_library",
            "match": ".*",
            "order": 2
          }
        ]
      }
    ],
    "no-console": [
      true,
      "log",
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-empty": false,
    "no-inferrable-types": [
      true,
      "ignore-params"
    ],
    "no-non-null-assertion": true,
    "no-redundant-jsdoc": true,
    "no-switch-case-fall-through": true,
    "object-literal-sort-keys": false,
    "no-tautology-expression": true,
    "ban-comma-operator": true,
    "typedef": [
      true,
      "parameter",
      "property-declaration"
    ],
    "no-unnecessary-callback-wrapper": true,
    "prefer-readonly": true,
    "array-type": [
      true,
      "array"
    ],
    /*
     ** Codelyzer rules
     */
    "no-output-on-prefix": true,
    "no-output-native": true,
    "no-inputs-metadata-property": true,
    "no-outputs-metadata-property": true,
    "no-host-metadata-property": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "use-lifecycle-interface": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true,
    // Bans jasmine helper functions that will prevent the CI from properly running tests.
    "ban": [
      true,
      "eval",
      [
        "fit"
      ],
      [
        "fdescribe"
      ],
      [
        "xit"
      ],
      [
        "xdescribe"
      ],
      {
        "name": "Object.assign",
        "message": "Use the spread operator instead."
      }
    ],
    // Avoids inconsistent linebreak styles in source files. Forces developers to use LF linebreak
    "linebreak-style": [
      true,
      "LF"
    ],
    "jsdoc-format": [
      true,
      "check-multiline-start"
    ],
    "file-name-casing": [
      true,
      {
        // Exclude custom lint rule files since they have to always be camel-cased and end with "Rule"
        ".*Rule.ts": "camel-case",
        ".*": "kebab-case"
      }
    ]
  },
  "linterOptions": {
    "exclude": []
  }
}